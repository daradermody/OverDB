interface Person {
  id: ID!
  name: String!
  profilePath: String
}

type PersonInfo implements Person {
  id: ID!
  name: String!
  profilePath: String
  knownForDepartment: String
  biography: String
  favourited: Boolean
}

type CrewCredit implements Person {
  id: ID!
  name: String!
  jobs: [String!]!
  profilePath: String
}

type CastCredit implements Person {
  id: ID!
  name: String!
  character: String!
  profilePath: String
  order: Int!
}

type MovieInfo {
  id: ID!
  imdbId: ID!
  title: String!
  tagline: String!
  overview: String!
  voteAverage: Float!
  releaseDate: String
  posterPath: String
  tomatometer: Tomatometer
}

type Movie {
  id: ID!
  imdbId: ID!
  title: String!
  tagline: String!
  overview: String!
  voteAverage: Float!
  releaseDate: String
  posterPath: String
  tomatometer: Tomatometer
  providers: [Provider!]!
  watched: Boolean
  inWatchlist: Boolean
  sentiment: Sentiment
}

type MovieCredit {
  id: ID!
  title: String!
  posterPath: String
  releaseDate: String
  watched: Boolean
  inWatchlist: Boolean
  sentiment: Sentiment
  jobs: [String!]!
  character: String
}

union MovieOrPerson = Movie | PersonInfo

enum Sentiment {
  NONE
  LIKED
  DISLIKED
}

type PaginatedMovies {
  total: Int!
  offset: Int!
  limit: Int!
  endReached: Boolean!
  results: [Movie!]!
}

type PaginatedPeople {
  offset: Int!
  limit: Int!
  endReached: Boolean!
  results: [PersonInfo!]!
}

enum TomatometerState {
  CERTIFIED_FRESH
  FRESH
  ROTTEN
}

type Tomatometer {
  state: TomatometerState!
  score: Int!
  consensus: String
  link: String!
}

type Provider {
  id: ID!
  name: String!
  logo: String!
}

type Stats {
  favouritePeople: Int!
  watched: Int!
  moviesLiked: Int!
  watchlist: Int!
}

type UserSettings {
  streaming: UserStreamingSettings!
}

type UserStreamingSettings {
  region: ID
  providers: [ID!]!
}

type User {
  username: ID!
  avatarUrl: String!
  isAdmin: Boolean
  public: Boolean
  favouritePeople(offset: Int, limit: Int): PaginatedPeople!
  lists(type: ListType): [List!]!
  list(id: ID!): List!
  watched(offset: Int, limit: Int): PaginatedMovies!
  likedMovies(offset: Int, limit: Int): PaginatedMovies!
  stats: Stats!
}

enum ListType {
  MOVIE
  PERSON
}

type List {
  id: ID!
  name: String!
  type: ListType!
  items(offset: Int, limit: Int, filteredByProviders: Boolean): PaginatedMovies!
}

type Query {
  recommendedMovies(size: Int): [Movie!]!
  movie(id: ID!): Movie!
  crewForMovie(id: ID!): [CrewCredit!]!
  castForMovie(id: ID!): [CastCredit!]!
  person(id: ID!): PersonInfo!
  creditsForPerson(id: ID!): [MovieCredit!]!
  search(query: String!): [MovieOrPerson!]!
  trending(size: Int): [MovieInfo!]!
  upcoming: [Movie!]!
  user(username: ID!): User!
  users: [User!]!
  streamingProviders(region: String!): [Provider!]!
  settings: UserSettings!
}

input UserSettingsInput {
  streaming: UserStreamingSettingsInput
}

input UserStreamingSettingsInput {
  region: ID
  providers: [ID!]
}

type Mutation {
  setFavourite(id: ID!, favourited: Boolean!): PersonInfo!
  setWatched(id: ID!, watched: Boolean!): Movie!
  setInWatchlist(id: ID!, inWatchlist: Boolean!): Movie!
  setSentiment(id: ID!, sentiment: Sentiment!): Movie!
  createList(name: String!, type: ListType!): List!
  deleteLists(ids: [ID!]!): Boolean!
  editList(id: ID!, name: String!): List!
  addToList(listId: ID!, itemId: ID!): List!
  removeFromList(listId: ID!, itemId: ID!): List!
  updateUserSettings(settings: UserSettingsInput!): UserSettings!
}
